{"ast":null,"code":"import _objectSpread from \"/Users/DevinPowell/Desktop/Class/GitHub Repositories/clickingBad/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/DevinPowell/Desktop/Class/GitHub Repositories/clickingBad/src/components/Game/Game.js\";\nimport React from \"react\";\nimport \"./Game.css\";\nimport Image from \"./Image.js\";\nimport imgs from \"../../img\";\nimport Navbar from \"../../Navbar\";\nimport Footer from \"../../Footer\"; // Create a state with count, clicked boolean, score to add up, and the img\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props); // console.log(props);\n\n    this.handleClick = ({\n      id,\n      clicked\n    }) => {\n      let imgs;\n\n      if (clicked) {\n        imgs = this.state.imgs.map(img => {\n          return _objectSpread({}, img, {\n            clicked: false\n          });\n        });\n      } else {\n        imgs = this.state.imgs.map(img => {\n          if (img.id === id) {\n            return _objectSpread({}, img, {\n              clicked: true\n            });\n          } else return img;\n        });\n      }\n\n      const score = imgs.reduce((acc, img) => {\n        if (img.clicked) return acc + 1;else return acc;\n      }, 0);\n      this.setState({\n        score,\n        imgs: this.shuffle(imgs)\n      });\n    };\n\n    this.state = {\n      count: 0,\n      clicked: false,\n      score: 0,\n      imgs\n    };\n  } // Shuffle function to randomize order\n\n\n  shuffle(array) {\n    var currentIndex = array.length,\n        temporaryValue,\n        randomIndex; // While there remain elements to shuffle\n\n    while (0 !== currentIndex) {\n      // Pick a remaining element\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1; // And Swap it with the current element\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  } // handleClick function for each choice user makes\n\n\n  // Render\n  render() {\n    return React.createElement(\"div\", {\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      score: this.state.score,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"game-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"instructions center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Click on an image to earn points, but don't click it more than once!\"))), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, this.state.imgs.map((img, i) => {\n      return React.createElement(Image, {\n        img: img.img,\n        clicked: img.clicked,\n        key: img.id,\n        id: img.id,\n        handleClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      });\n    }))), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }));\n  } // end Render\n\n\n} // end Class Component\n\n\nexport default Game;","map":{"version":3,"sources":["/Users/DevinPowell/Desktop/Class/GitHub Repositories/clickingBad/src/components/Game/Game.js"],"names":["React","Image","imgs","Navbar","Footer","Game","Component","constructor","props","handleClick","id","clicked","state","map","img","score","reduce","acc","setState","shuffle","count","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","render","i"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./Game.css\";\nimport Image from \"./Image.js\";\nimport imgs from \"../../img\";\nimport Navbar from \"../../Navbar\";\nimport Footer from \"../../Footer\";\n\n// Create a state with count, clicked boolean, score to add up, and the img\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        // console.log(props);\n        this.state = { count: 0, clicked: false, score: 0, imgs };\n    }\n\n    // Shuffle function to randomize order\n    shuffle(array) {\n        var currentIndex = array.length, temporaryValue, randomIndex;\n\n        // While there remain elements to shuffle\n        while (0 !== currentIndex) {\n            // Pick a remaining element\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n\n            // And Swap it with the current element\n            temporaryValue = array[currentIndex];\n            array[currentIndex] = array[randomIndex];\n            array[randomIndex] = temporaryValue;\n        }\n        return array;\n    }\n\n    // handleClick function for each choice user makes\n    handleClick = ({ id, clicked }) => {\n        let imgs;\n        if (clicked) {\n            imgs = this.state.imgs.map(img => { return { ...img, clicked: false } })\n        } else {\n            imgs = this.state.imgs.map(img => {\n                if (img.id === id) {\n                    return { ...img, clicked: true }\n                } else return img;\n            });\n        }\n\n        const score = imgs.reduce((acc, img) => {\n            if (img.clicked) return acc + 1\n            else return acc\n        }, 0);\n\n        this.setState({ score, imgs: this.shuffle(imgs) });\n    }\n\n    // Render\n    render() {\n        return (\n            <div className=\"grid\">\n                <Navbar score={this.state.score} />\n                <div className=\"game-container\">\n                    <div className=\"row\">\n                        <div className=\"col center\">\n                            <h4 className=\"instructions center\">Click on an image to earn points, but don't click it more than once!</h4>\n                        </div>\n                    </div>\n                    <div className='row'>\n                        {this.state.imgs.map((img, i) => {\n                            return (\n                                <Image\n                                    img={img.img}\n                                    clicked={img.clicked}\n                                    key={img.id}\n                                    id={img.id}\n                                    handleClick={this.handleClick}\n                                />\n                            )\n                        })}\n                    </div>\n\n                </div>\n                <Footer />\n            </div>\n        );\n    } // end Render\n} // end Class Component\n\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}